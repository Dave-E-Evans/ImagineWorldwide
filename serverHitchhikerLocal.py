import asyncio

from grpclib.utils import graceful_exit
from grpclib.server import Server, Stream

# generated by protoc
from hitchhiker_source_pb2 import DownloadFileRequest, DownloadFileReply
from hitchhiker_source_pb2 import GetDownloadsRequest, GetDownloadsReply
from hitchhiker_source_pb2 import GetSourceIdRequest, GetSourceIdReply
from hitchhiker_source_pb2 import MarkDeliveredRequest, MarkDeliveredReply

from hitchhiker_source_grpc import HitchhikerSourceBase


class HitchhikerSource(HitchhikerSourceBase):
    async def DownloadFile(self, stream: Stream[DownloadFileRequest, DownloadFileReply]) -> None:
        request = await stream.recv_message()
        assert request is not None
        files = [
            {"file_id": "file_id_1", "file_name": "file_name_1", "type": "file_type_1"},
            {"file_id": "file_id_2", "file_name": "file_name_2", "type": "file_type_1", "blob": b"\xBA\xAD\xF0\x0D"}
        ]
        await stream.send_message(DownloadFileReply(files=files))

    async def GetDownloads(self, stream: Stream[GetDownloadsRequest, GetDownloadsReply]) -> None:
        request = await stream.recv_message()
        assert request is not None
        file_list = [{"file_id": "file_id_1", "file_name": "file_name_1"}, {"file_id": "file_id_2", "file_name": "file_name_2"}]
        await stream.send_message(GetDownloadsReply(file_list=file_list))

    async def GetSourceId(self, stream: Stream[GetSourceIdRequest, GetSourceIdReply]) -> None:
        request = await stream.recv_message()
        assert request is not None
        source_id = f'TODO SourceId!'
        await stream.send_message(GetSourceIdReply(source_id=source_id))

    async def MarkDelivered(self, stream: Stream[MarkDeliveredRequest, MarkDeliveredReply]) -> None:
        request = await stream.recv_message()
        assert request is not None
        await stream.send_message(MarkDeliveredReply())

async def grpc_main(*, host: str = '127.0.0.1', port: int = 3001) -> None:
    server = Server([HitchhikerSource()])
    # Note: graceful_exit isn't supported in Windows
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()

if __name__ == "__main__":
    asyncio.run(grpc_main())