import asyncio
import datetime
import json
import os
import requests
import shutil
from subprocess import Popen, PIPE
import tempfile
from urllib.parse import quote

from grpclib.client import Channel

# generated by protoc
from hitchhiker_source_pb2 import DownloadFileRequest, DownloadFileReply
from hitchhiker_source_pb2 import GetDownloadsRequest, GetDownloadsReply
from hitchhiker_source_pb2 import GetSourceIdRequest, GetSourceIdReply
from hitchhiker_source_pb2 import MarkDeliveredRequest, MarkDeliveredReply
from hitchhiker_source_grpc import HitchhikerSourceStub

# Run the servers
async def start_servers(log_path):
    processes = []

    metrics_env = os.environ.copy()
    metrics_env["LOG_PATH"] = log_path
    metrics_env["LOG_PATH_MAX_SIZE"] = "600" 
    metrics_env["LOG_PATH_TARGET_SIZE"] = "450" 
    metrics_env["LOG_PATH_GC_INTERVAL"] = "1" 
    processes.append(Popen(["python3", "serverMetricsLocal.py"], env=metrics_env))

    hitchhiker_env = os.environ.copy()
    hitchhiker_env["LOG_PATH"] = os.path.join(log_path, "countly")
    hitchhiker_env["SOURCE_ID"] = "pilot_01"
    processes.append(Popen(["python3", "serverHitchhikerLocal.py"], env=hitchhiker_env))

    await asyncio.sleep(2)  # Wait a moment for the servers to start

    return processes

# Submit an event to the countly API
def submit_event(day):
    # Encode some information about events 
    events = [
        {
            "key": "level_success",
            "count": 4
        },
        {
            "key": "level_fail",
            "count": 2
        }
    ]

    events_as_string = json.dumps(events)
    events_as_url_encoded_string = quote(events_as_string)

    url = f"http://127.0.0.1:3000/i?app_key=app_key&device_id=device_id&timestamp=2024-01-{day:02d}&events={events_as_url_encoded_string}"
    headers = {"accept": "application/json"}

    requests.get(url, headers)

async def main():
    # Create a temporary folder to store this data
    log_path = tempfile.mkdtemp()
    print("Log Path: " + log_path)

    client_id = "test_client_id"
    destination_id = "test_destination_id"

    # Run the servers
    processes = await start_servers(log_path=log_path)

    try:
        async with Channel("127.0.0.1", "3001") as channel:
            hitchhiker = HitchhikerSourceStub(channel)

            # Test GetSourceId
            reply = await hitchhiker.GetSourceId(GetSourceIdRequest())
            assert reply.source_id == "pilot_01"

            # Submit a couple of events
            submit_event(1)
            submit_event(2)

            # Test two files exist
            reply = await hitchhiker.GetDownloads(GetDownloadsRequest(client_id=client_id, destination_id=destination_id))
            file_list = reply.file_list 
            assert len(reply.file_list) == 2

            # Get the contents of the files
            reply = await hitchhiker.DownloadFile(DownloadFileRequest(client_id=client_id, file_list=reply.file_list))
            assert len(reply.files) == 2
            assert reply.files[0].file_name == "log-2024-01-01-device_id.json"
            assert reply.files[1].file_name == "log-2024-01-02-device_id.json"

            # Mark the files as delivered, leaving zero behind.
            await hitchhiker.MarkDelivered(MarkDeliveredRequest(client_id=client_id, destination_id=destination_id, file_list=file_list))
            await asyncio.sleep(1)
            reply = await hitchhiker.GetDownloads(GetDownloadsRequest(client_id=client_id, destination_id=destination_id))
            assert len(reply.file_list) == 0

            # Make five events. This is too many and the garbage collector should delete the first three
            submit_event(1)
            submit_event(2)
            submit_event(3)
            submit_event(4)
            submit_event(5)
            await asyncio.sleep(2)
            reply = await hitchhiker.GetDownloads(GetDownloadsRequest(client_id=client_id, destination_id=destination_id))
            assert len(reply.file_list) == 2
            assert reply.file_list[0].file_name == "log-2024-01-04-device_id.json"
            assert reply.file_list[1].file_name == "log-2024-01-05-device_id.json"

    finally:
        # Kill the processes
        for process in processes:
            process.kill()

        # Delete the temporary folder
        shutil.rmtree(log_path)

if __name__ == '__main__':
    asyncio.run(main())    